
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000304  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000304  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800074  00800074  000003ac  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000b00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d1  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000389  00000000  00000000  000013b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051c  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00001c58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000234  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c4  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  8a:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
  92:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	90 e7       	ldi	r25, 0x70	; 112
  98:	a2 e0       	ldi	r26, 0x02	; 2
  9a:	81 50       	subi	r24, 0x01	; 1
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	a0 40       	sbci	r26, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <LCD_lcd_kick+0x8>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <LCD_lcd_kick+0x12>
  a4:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
  a6:	c3 98       	cbi	0x18, 3	; 24
}
  a8:	08 95       	ret

000000aa <LCD_check_lcd_isbusy>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
}

void LCD_check_lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
  aa:	8a b3       	in	r24, 0x1a	; 26
  ac:	8f 70       	andi	r24, 0x0F	; 15
  ae:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
  b0:	c2 9a       	sbi	0x18, 2	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
  b2:	c1 98       	cbi	0x18, 1	; 24
	LCD_lcd_kick();
  b4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
  b8:	8a b3       	in	r24, 0x1a	; 26
  ba:	80 6f       	ori	r24, 0xF0	; 240
  bc:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
  be:	c2 98       	cbi	0x18, 2	; 24
	
}
  c0:	08 95       	ret

000000c2 <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
		_delay_ms(1);
		LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
		LCD_check_lcd_isbusy();
  c6:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_check_lcd_isbusy>
		LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	9c 2f       	mov	r25, r28
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	89 2b       	or	r24, r25
  d4:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	89 7f       	andi	r24, 0xF9	; 249
  da:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick ();
  dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
  e0:	8b b3       	in	r24, 0x1b	; 27
  e2:	c2 95       	swap	r28
  e4:	c0 7f       	andi	r28, 0xF0	; 240
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	c8 2b       	or	r28, r24
  ea:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  ec:	88 b3       	in	r24, 0x18	; 24
  ee:	89 7f       	andi	r24, 0xF9	; 249
  f0:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick();
  f2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	#endif
}
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <LCD_GOTO_XY>:
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
	if (line == 1)
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	29 f4       	brne	.+10     	; 0x108 <LCD_GOTO_XY+0xe>
	{

			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
  fe:	86 2f       	mov	r24, r22
 100:	80 58       	subi	r24, 0x80	; 128
 102:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
 106:	08 95       	ret

	}
	if (line == 2)
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	21 f4       	brne	.+8      	; 0x114 <LCD_GOTO_XY+0x1a>
	{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 10c:	86 2f       	mov	r24, r22
 10e:	80 54       	subi	r24, 0x40	; 64
 110:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
 114:	08 95       	ret

00000116 <LCD_clear_screen>:


#include "lcd.h"

void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
}
 11c:	08 95       	ret

0000011e <LCD_INIT>:
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	99 ef       	ldi	r25, 0xF9	; 249
 122:	a0 e0       	ldi	r26, 0x00	; 0
 124:	81 50       	subi	r24, 0x01	; 1
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	a0 40       	sbci	r26, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <LCD_INIT+0x6>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_INIT+0x10>
 12e:	00 00       	nop
	}
}

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 130:	87 b3       	in	r24, 0x17	; 23
 132:	8e 60       	ori	r24, 0x0E	; 14
 134:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 136:	88 b3       	in	r24, 0x18	; 24
 138:	81 7f       	andi	r24, 0xF1	; 241
 13a:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	8a bb       	out	0x1a, r24	; 26
 140:	af e5       	ldi	r26, 0x5F	; 95
 142:	ba ee       	ldi	r27, 0xEA	; 234
 144:	11 97       	sbiw	r26, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_INIT+0x26>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_INIT+0x2c>
 14a:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 14c:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_clear_screen>
		//LCD_WRITE_COMMAND(0x02);		/* send for 4 bit initialization of LCD  */
		//LCD_WRITE_COMMAND(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
		//LCD_WRITE_COMMAND(0x0c);              /* Display on cursor off*/
		//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
		//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 156:	88 e2       	ldi	r24, 0x28	; 40
 158:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 168:	8f e0       	ldi	r24, 0x0F	; 15
 16a:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
}
 16e:	08 95       	ret

00000170 <LCD_WRITE_CHAR>:
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
		_delay_ms(1);
		LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
		//LCD_check_lcd_isbusy();
		LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 174:	8b b3       	in	r24, 0x1b	; 27
 176:	9c 2f       	mov	r25, r28
 178:	90 7f       	andi	r25, 0xF0	; 240
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	89 2b       	or	r24, r25
 17e:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 180:	c1 9a       	sbi	0x18, 1	; 24
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 182:	c2 98       	cbi	0x18, 2	; 24
		LCD_lcd_kick();
 184:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 188:	8b b3       	in	r24, 0x1b	; 27
 18a:	c2 95       	swap	r28
 18c:	c0 7f       	andi	r28, 0xF0	; 240
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	c8 2b       	or	r28, r24
 192:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 194:	c1 9a       	sbi	0x18, 1	; 24
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 196:	c2 98       	cbi	0x18, 2	; 24
		LCD_lcd_kick ();
 198:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	#endif
}
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
	unsigned char count = 0;
 1a6:	c8 2f       	mov	r28, r24
 1a8:	d9 2f       	mov	r29, r25
 1aa:	10 e0       	ldi	r17, 0x00	; 0
	while (*string > 0){
 1ac:	13 c0       	rjmp	.+38     	; 0x1d4 <LCD_WRITE_STRING+0x34>
	
		LCD_WRITE_CHAR(*string++);
 1ae:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_WRITE_CHAR>
		count++;
 1b2:	1f 5f       	subi	r17, 0xFF	; 255
		if (count == 16)
 1b4:	10 31       	cpi	r17, 0x10	; 16
 1b6:	29 f4       	brne	.+10     	; 0x1c2 <LCD_WRITE_STRING+0x22>
		{
			LCD_GOTO_XY(2,0);
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_GOTO_XY>
 1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <LCD_WRITE_STRING+0x34>
		}
		else if (count == 31)
 1c2:	1f 31       	cpi	r17, 0x1F	; 31
 1c4:	39 f4       	brne	.+14     	; 0x1d4 <LCD_WRITE_STRING+0x34>
		{
			LCD_clear_screen();
 1c6:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_GOTO_XY>
			count = 0;
 1d2:	10 e0       	ldi	r17, 0x00	; 0
	#endif
}

void LCD_WRITE_STRING(char* string){
	unsigned char count = 0;
	while (*string > 0){
 1d4:	89 91       	ld	r24, Y+
 1d6:	88 23       	and	r24, r24
 1d8:	51 f7       	brne	.-44     	; 0x1ae <LCD_WRITE_STRING+0xe>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	08 95       	ret

000001e2 <main>:


int main(void)
{
	unsigned char * x;
	LCD_INIT();
 1e2:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_INIT>
	UART_Init();
 1e6:	0e 94 34 01 	call	0x268	; 0x268 <UART_Init>
	

	LCD_WRITE_STRING("UART Lab");
 1ea:	80 e6       	ldi	r24, 0x60	; 96
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_WRITE_STRING>

    LCD_GOTO_XY(2,1);
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_GOTO_XY>
	UART_send_string("Sending...");
 1fa:	89 e6       	ldi	r24, 0x69	; 105
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_send_string>
 
	
	while(1)
    {
		x = UART_recieve_string(); 
 202:	0e 94 5f 01 	call	0x2be	; 0x2be <UART_recieve_string>
		LCD_WRITE_STRING(x);
 206:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_WRITE_STRING>
 20a:	fb cf       	rjmp	.-10     	; 0x202 <main+0x20>

0000020c <Port_Direction>:

#include "../AVRMemoryMap.h"


void Port_Direction(unsigned char base,unsigned char state){
	if(state == 1)
 20c:	61 30       	cpi	r22, 0x01	; 1
 20e:	31 f4       	brne	.+12     	; 0x21c <Port_Direction+0x10>
		*(volatile unsigned char*)(base-1)=0xFF;
 210:	e8 2f       	mov	r30, r24
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	80 83       	st	Z, r24
 21a:	08 95       	ret
	else
		*(volatile unsigned char*)(base-1)=0x00;
 21c:	e8 2f       	mov	r30, r24
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	10 82       	st	Z, r1
 224:	08 95       	ret

00000226 <Pin_Direction>:
}

void Pin_Direction(unsigned char base,unsigned char pin,unsigned char state){
	if(state == 1)
 226:	41 30       	cpi	r20, 0x01	; 1
 228:	79 f4       	brne	.+30     	; 0x248 <Pin_Direction+0x22>
	*(volatile unsigned char*)(base-1)|=(1<<pin);
 22a:	e8 2f       	mov	r30, r24
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	22 91       	ld	r18, -Z
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <Pin_Direction+0x16>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <Pin_Direction+0x12>
 240:	ba 01       	movw	r22, r20
 242:	62 2b       	or	r22, r18
 244:	60 83       	st	Z, r22
 246:	08 95       	ret
	else
	*(volatile unsigned char*)(base-1)&= ~(1<<pin);
 248:	e8 2f       	mov	r30, r24
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	22 91       	ld	r18, -Z
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	ac 01       	movw	r20, r24
 254:	02 c0       	rjmp	.+4      	; 0x25a <Pin_Direction+0x34>
 256:	44 0f       	add	r20, r20
 258:	55 1f       	adc	r21, r21
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <Pin_Direction+0x30>
 25e:	ba 01       	movw	r22, r20
 260:	60 95       	com	r22
 262:	62 23       	and	r22, r18
 264:	60 83       	st	Z, r22
 266:	08 95       	ret

00000268 <UART_Init>:
char recieve_string[20];


void UART_Init(void){
	// transmission speed
	CLEAR_BIT(UCSRA,U2X);   // Normal Speed
 268:	59 98       	cbi	0x0b, 1	; 11
	
	//Frame
	//No parity by default
	//Frame Size 8 bits
	SET_BIT(UCSRC,UCSZ0);
 26a:	80 b5       	in	r24, 0x20	; 32
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC,UCSZ1);
 270:	80 b5       	in	r24, 0x20	; 32
 272:	84 60       	ori	r24, 0x04	; 4
 274:	80 bd       	out	0x20, r24	; 32
	CLEAR_BIT(UCSRB,UCSZ2);
 276:	52 98       	cbi	0x0a, 2	; 10
	
	//select asynchronous mode
	CLEAR_BIT(UCSRC,UMSEL);
 278:	80 b5       	in	r24, 0x20	; 32
 27a:	8f 7b       	andi	r24, 0xBF	; 191
 27c:	80 bd       	out	0x20, r24	; 32
		
	// baud rate
	UBRRH = 0;
 27e:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
 280:	83 e3       	ldi	r24, 0x33	; 51
 282:	89 b9       	out	0x09, r24	; 9
	
	//select only one bit for stop
	CLEAR_BIT(UCSRC,USBS);
 284:	80 b5       	in	r24, 0x20	; 32
 286:	87 7f       	andi	r24, 0xF7	; 247
 288:	80 bd       	out	0x20, r24	; 32

	//enable
	//Tx Enable
	SET_BIT(UCSRB,TXEN);
 28a:	53 9a       	sbi	0x0a, 3	; 10
	//Rx Enable
	SET_BIT(UCSRB,RXEN);
 28c:	54 9a       	sbi	0x0a, 4	; 10

}
 28e:	08 95       	ret

00000290 <UART_Send>:

void UART_Send(uint8_t data){
	while(!(READ_BIT(UCSRA,UDRE)));
 290:	5d 9b       	sbis	0x0b, 5	; 11
 292:	fe cf       	rjmp	.-4      	; 0x290 <UART_Send>
			UDR = data;
 294:	8c b9       	out	0x0c, r24	; 12
}
 296:	08 95       	ret

00000298 <UART_recive>:


uint8_t UART_recive(void){
	while (!(READ_BIT(UCSRA,RXC)));
 298:	5f 9b       	sbis	0x0b, 7	; 11
 29a:	fe cf       	rjmp	.-4      	; 0x298 <UART_recive>
		return UDR;
 29c:	8c b1       	in	r24, 0x0c	; 12

}
 29e:	08 95       	ret

000002a0 <UART_send_string>:

void UART_send_string(char * str)
{
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
	while(*str != '\0')
 2a6:	88 81       	ld	r24, Y
 2a8:	88 23       	and	r24, r24
 2aa:	31 f0       	breq	.+12     	; 0x2b8 <UART_send_string+0x18>
	while (!(READ_BIT(UCSRA,RXC)));
		return UDR;

}

void UART_send_string(char * str)
 2ac:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UART_Send(*str);
 2ae:	0e 94 48 01 	call	0x290	; 0x290 <UART_Send>

}

void UART_send_string(char * str)
{
	while(*str != '\0')
 2b2:	89 91       	ld	r24, Y+
 2b4:	88 23       	and	r24, r24
 2b6:	d9 f7       	brne	.-10     	; 0x2ae <UART_send_string+0xe>
	{
		UART_Send(*str);
		str++;
	}
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <UART_recieve_string>:

char * UART_recieve_string(void)
{
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
	uint8_t data= UART_recive();
 2c6:	0e 94 4c 01 	call	0x298	; 0x298 <UART_recive>
	int i = 0;
	while(data != '#')
 2ca:	83 32       	cpi	r24, 0x23	; 35
 2cc:	61 f0       	breq	.+24     	; 0x2e6 <UART_recieve_string+0x28>
 2ce:	c4 e7       	ldi	r28, 0x74	; 116
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
}

char * UART_recieve_string(void)
{
	uint8_t data= UART_recive();
	int i = 0;
 2d2:	00 e0       	ldi	r16, 0x00	; 0
 2d4:	10 e0       	ldi	r17, 0x00	; 0
	while(data != '#')
	{
		recieve_string[i] = data;
 2d6:	89 93       	st	Y+, r24
		data = UART_recive();
 2d8:	0e 94 4c 01 	call	0x298	; 0x298 <UART_recive>
		i++;
 2dc:	0f 5f       	subi	r16, 0xFF	; 255
 2de:	1f 4f       	sbci	r17, 0xFF	; 255

char * UART_recieve_string(void)
{
	uint8_t data= UART_recive();
	int i = 0;
	while(data != '#')
 2e0:	83 32       	cpi	r24, 0x23	; 35
 2e2:	c9 f7       	brne	.-14     	; 0x2d6 <UART_recieve_string+0x18>
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <UART_recieve_string+0x2c>
}

char * UART_recieve_string(void)
{
	uint8_t data= UART_recive();
	int i = 0;
 2e6:	00 e0       	ldi	r16, 0x00	; 0
 2e8:	10 e0       	ldi	r17, 0x00	; 0
	{
		recieve_string[i] = data;
		data = UART_recive();
		i++;
	}
	recieve_string[i] = '\0';
 2ea:	84 e7       	ldi	r24, 0x74	; 116
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	fc 01       	movw	r30, r24
 2f0:	e0 0f       	add	r30, r16
 2f2:	f1 1f       	adc	r31, r17
 2f4:	10 82       	st	Z, r1
	return recieve_string;
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	08 95       	ret

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
