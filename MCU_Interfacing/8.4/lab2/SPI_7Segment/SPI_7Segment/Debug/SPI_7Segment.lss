
SPI_7Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000010c  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000435  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000016d  00000000  00000000  00000d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000356  00000000  00000000  00000efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013d  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003e  00000000  00000000  000013e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  8a:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_MasterInit>:
#define MOSI	5
#define MISO	6
#define SCLK	7

void SPI_MasterInit(){
	DDRB |= ((1 << MOSI)|(1<<SS)|(1<<SCLK));
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 6b       	ori	r24, 0xB0	; 176
  96:	87 bb       	out	0x17, r24	; 23
	
	SPCR |= ((1<< SPE)|(1<<MSTR)|(1<<SPR0));
  98:	8d b1       	in	r24, 0x0d	; 13
  9a:	81 65       	ori	r24, 0x51	; 81
  9c:	8d b9       	out	0x0d, r24	; 13
}
  9e:	08 95       	ret

000000a0 <Transmit_7Seg>:

void Transmit_7Seg(uint8_t cmd,uint8_t  data){
	PORTB &= ~(1<<SS);	//first make CS low before transmitting
  a0:	c4 98       	cbi	0x18, 4	; 24
	
	SPDR = cmd;		//send command
  a2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  a4:	77 9b       	sbis	0x0e, 7	; 14
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <Transmit_7Seg+0x4>
	
	SPDR = data;	//send data
  a8:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));
  aa:	77 9b       	sbis	0x0e, 7	; 14
  ac:	fe cf       	rjmp	.-4      	; 0xaa <Transmit_7Seg+0xa>

	PORTB |= (1<<SS); //terminate the transmission by making CS high
  ae:	c4 9a       	sbi	0x18, 4	; 24
}
  b0:	08 95       	ret

000000b2 <Sev_Seg_Init>:

void Sev_Seg_Init(){
	Transmit_7Seg(0x9,0xFF);	//decode for all 7 digits
  b2:	89 e0       	ldi	r24, 0x09	; 9
  b4:	6f ef       	ldi	r22, 0xFF	; 255
  b6:	0e 94 50 00 	call	0xa0	; 0xa0 <Transmit_7Seg>
	Transmit_7Seg(0xA,0x0F);	//Maximum intensity Mode
  ba:	8a e0       	ldi	r24, 0x0A	; 10
  bc:	6f e0       	ldi	r22, 0x0F	; 15
  be:	0e 94 50 00 	call	0xa0	; 0xa0 <Transmit_7Seg>
	Transmit_7Seg(0xB,0x07);	//Scan Limit set all digits 
  c2:	8b e0       	ldi	r24, 0x0B	; 11
  c4:	67 e0       	ldi	r22, 0x07	; 7
  c6:	0e 94 50 00 	call	0xa0	; 0xa0 <Transmit_7Seg>
	Transmit_7Seg(0xC,0x01);	//enable (Normal Operation)
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	0e 94 50 00 	call	0xa0	; 0xa0 <Transmit_7Seg>
}
  d2:	08 95       	ret

000000d4 <main>:

int main(void)
{	uint8_t i,count=0;
	
	SPI_MasterInit();
  d4:	0e 94 49 00 	call	0x92	; 0x92 <SPI_MasterInit>
	Sev_Seg_Init();
  d8:	0e 94 59 00 	call	0xb2	; 0xb2 <Sev_Seg_Init>
	Transmit_7Seg(0xB,0x07);	//Scan Limit set all digits 
	Transmit_7Seg(0xC,0x01);	//enable (Normal Operation)
}

int main(void)
{	uint8_t i,count=0;
  dc:	d0 e0       	ldi	r29, 0x00	; 0
	SPI_MasterInit();
	Sev_Seg_Init();
	
    while(1)
    {
        for (i=1;i<=8;i++,count++)
  de:	c1 e0       	ldi	r28, 0x01	; 1
  e0:	11 e0       	ldi	r17, 0x01	; 1
        {
			Transmit_7Seg(i,count);
  e2:	8c 2f       	mov	r24, r28
  e4:	6d 2f       	mov	r22, r29
  e6:	0e 94 50 00 	call	0xa0	; 0xa0 <Transmit_7Seg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	8f e9       	ldi	r24, 0x9F	; 159
  ec:	96 e8       	ldi	r25, 0x86	; 134
  ee:	a1 e0       	ldi	r26, 0x01	; 1
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	a0 40       	sbci	r26, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x1c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x26>
  fa:	00 00       	nop
	SPI_MasterInit();
	Sev_Seg_Init();
	
    while(1)
    {
        for (i=1;i<=8;i++,count++)
  fc:	cf 5f       	subi	r28, 0xFF	; 255
  fe:	df 5f       	subi	r29, 0xFF	; 255
 100:	c9 30       	cpi	r28, 0x09	; 9
 102:	78 f3       	brcs	.-34     	; 0xe2 <main+0xe>
 104:	c1 2f       	mov	r28, r17
 106:	ed cf       	rjmp	.-38     	; 0xe2 <main+0xe>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
