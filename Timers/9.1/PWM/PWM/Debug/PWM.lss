
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002a4  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000338  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00000a90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000951  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000249  00000000  00000000  000014e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000589  00000000  00000000  0000172a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028a  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000264  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  8a:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER0_Init>:


/**********************************
*	APIs Implementations
**********************************/
void TIMER0_Init(TIMER0_CONFIG* configuartion){
  92:	fc 01       	movw	r30, r24
	//intualizing
	TIMER0_Configurations = configuartion;
  94:	90 93 61 00 	sts	0x0061, r25
  98:	80 93 60 00 	sts	0x0060, r24
	
	//choosing the mode
	TCCR0 |= TIMER0_Configurations->mode;
  9c:	93 b7       	in	r25, 0x33	; 51
  9e:	80 81       	ld	r24, Z
  a0:	89 2b       	or	r24, r25
  a2:	83 bf       	out	0x33, r24	; 51
	//choosing clk prescaler
	TCCR0 |= TIMER0_Configurations->clk;	
  a4:	93 b7       	in	r25, 0x33	; 51
  a6:	81 81       	ldd	r24, Z+1	; 0x01
  a8:	89 2b       	or	r24, r25
  aa:	83 bf       	out	0x33, r24	; 51
	// choosing the polarity for CO0 pin 
	TCCR0 |= TIMER0_Configurations->polarity;
  ac:	93 b7       	in	r25, 0x33	; 51
  ae:	82 81       	ldd	r24, Z+2	; 0x02
  b0:	89 2b       	or	r24, r25
  b2:	83 bf       	out	0x33, r24	; 51
}
  b4:	08 95       	ret

000000b6 <TIMER0_Deinit>:

void TIMER0_Deinit(){
	TIMER0_Configurations = NULL;
  b6:	10 92 61 00 	sts	0x0061, r1
  ba:	10 92 60 00 	sts	0x0060, r1
	TIMSK = 0x00;
  be:	19 be       	out	0x39, r1	; 57
}
  c0:	08 95       	ret

000000c2 <TIMER0_GetCompareValue>:


void TIMER0_GetCompareValue(uint8_t* pu8_TicksNumber){
	
		*pu8_TicksNumber = OCR0;
  c2:	2c b7       	in	r18, 0x3c	; 60
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
}
  c8:	08 95       	ret

000000ca <TIMER0_SetCompareValue>:

void TIMER0_SetCompareValue(uint8_t u8_TicksNumber){
		OCR0 = u8_TicksNumber;
  ca:	8c bf       	out	0x3c, r24	; 60
}
  cc:	08 95       	ret

000000ce <TIMER0_GetDutyValue>:

void TIMER0_GetDutyValue(uint8_t* pu8_Duty){
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	0f 92       	push	r0
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	8c 01       	movw	r16, r24
	uint8_t CmpVal =0;
  de:	19 82       	std	Y+1, r1	; 0x01
	TIMER0_GetCompareValue(&CmpVal);
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	0e 94 61 00 	call	0xc2	; 0xc2 <TIMER0_GetCompareValue>
	*pu8_Duty = (CmpVal*100)/255;
  e8:	29 81       	ldd	r18, Y+1	; 0x01
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	44 e6       	ldi	r20, 0x64	; 100
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	24 9f       	mul	r18, r20
  f2:	c0 01       	movw	r24, r0
  f4:	25 9f       	mul	r18, r21
  f6:	90 0d       	add	r25, r0
  f8:	34 9f       	mul	r19, r20
  fa:	90 0d       	add	r25, r0
  fc:	11 24       	eor	r1, r1
  fe:	6f ef       	ldi	r22, 0xFF	; 255
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	0e 94 07 01 	call	0x20e	; 0x20e <__divmodhi4>
 106:	f8 01       	movw	r30, r16
 108:	60 83       	st	Z, r22
}
 10a:	0f 90       	pop	r0
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <TIMER0_SetDutyValue>:

void TIMER0_SetDutyValue(uint8_t u8_Duty){
	uint8_t CmpVal = (255* u8_Duty)/(100);
 116:	28 2f       	mov	r18, r24
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	92 2f       	mov	r25, r18
 11c:	88 27       	eor	r24, r24
 11e:	82 1b       	sub	r24, r18
 120:	93 0b       	sbc	r25, r19
 122:	64 e6       	ldi	r22, 0x64	; 100
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	0e 94 07 01 	call	0x20e	; 0x20e <__divmodhi4>
 12a:	86 2f       	mov	r24, r22
	 TIMER0_SetCompareValue(CmpVal);
 12c:	0e 94 65 00 	call	0xca	; 0xca <TIMER0_SetCompareValue>
}
 130:	08 95       	ret

00000132 <TIMER0_Get_FreqValue>:

void TIMER0_Get_FreqValue(TIMER0_CONFIG* configuartion,uint32_t* Fpwm){
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
 13c:	8b 01       	movw	r16, r22
	uint16_t prscaler = 0;
	switch (configuartion->clk)
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	99 f0       	breq	.+38     	; 0x16a <TIMER0_Get_FreqValue+0x38>
 144:	84 30       	cpi	r24, 0x04	; 4
 146:	28 f4       	brcc	.+10     	; 0x152 <TIMER0_Get_FreqValue+0x20>
 148:	88 23       	and	r24, r24
 14a:	51 f0       	breq	.+20     	; 0x160 <TIMER0_Get_FreqValue+0x2e>
 14c:	82 30       	cpi	r24, 0x02	; 2
 14e:	29 f4       	brne	.+10     	; 0x15a <TIMER0_Get_FreqValue+0x28>
 150:	15 c0       	rjmp	.+42     	; 0x17c <TIMER0_Get_FreqValue+0x4a>
 152:	84 30       	cpi	r24, 0x04	; 4
 154:	69 f0       	breq	.+26     	; 0x170 <TIMER0_Get_FreqValue+0x3e>
 156:	85 30       	cpi	r24, 0x05	; 5
 158:	71 f0       	breq	.+28     	; 0x176 <TIMER0_Get_FreqValue+0x44>
	{
		case NO_CLK_SRC:	TIMER0_Deinit();		break; // No clock source (Timer/Counter stopped)
		case NO_PRESCALING:		prscaler = 1;		break; //clkI/O (No prescaling)
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	10 c0       	rjmp	.+32     	; 0x180 <TIMER0_Get_FreqValue+0x4e>

void TIMER0_Get_FreqValue(TIMER0_CONFIG* configuartion,uint32_t* Fpwm){
	uint16_t prscaler = 0;
	switch (configuartion->clk)
	{
		case NO_CLK_SRC:	TIMER0_Deinit();		break; // No clock source (Timer/Counter stopped)
 160:	0e 94 5b 00 	call	0xb6	; 0xb6 <TIMER0_Deinit>
	uint8_t CmpVal = (255* u8_Duty)/(100);
	 TIMER0_SetCompareValue(CmpVal);
}

void TIMER0_Get_FreqValue(TIMER0_CONFIG* configuartion,uint32_t* Fpwm){
	uint16_t prscaler = 0;
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
	switch (configuartion->clk)
	{
		case NO_CLK_SRC:	TIMER0_Deinit();		break; // No clock source (Timer/Counter stopped)
 168:	0b c0       	rjmp	.+22     	; 0x180 <TIMER0_Get_FreqValue+0x4e>
		case NO_PRESCALING:		prscaler = 1;		break; //clkI/O (No prescaling)
		case PRESCALING_CLK8:	prscaler = 8;		break; //clkI/O/8 (From prescaler)
		case PRESCALING_CLK64:	prscaler = 16;		break; //clkI/O/64 (From prescaler)
 16a:	40 e1       	ldi	r20, 0x10	; 16
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	08 c0       	rjmp	.+16     	; 0x180 <TIMER0_Get_FreqValue+0x4e>
		case PRESCALING_CLK256: prscaler = 256;		break; //clkI/O/256 (From prescaler)
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	51 e0       	ldi	r21, 0x01	; 1
 174:	05 c0       	rjmp	.+10     	; 0x180 <TIMER0_Get_FreqValue+0x4e>
		case PRESCALING_CLK1024:prscaler = 1024;	break; // clkI/O/1024 (From prescaler)
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	54 e0       	ldi	r21, 0x04	; 4
 17a:	02 c0       	rjmp	.+4      	; 0x180 <TIMER0_Get_FreqValue+0x4e>
	uint16_t prscaler = 0;
	switch (configuartion->clk)
	{
		case NO_CLK_SRC:	TIMER0_Deinit();		break; // No clock source (Timer/Counter stopped)
		case NO_PRESCALING:		prscaler = 1;		break; //clkI/O (No prescaling)
		case PRESCALING_CLK8:	prscaler = 8;		break; //clkI/O/8 (From prescaler)
 17c:	48 e0       	ldi	r20, 0x08	; 8
 17e:	50 e0       	ldi	r21, 0x00	; 0
		case PRESCALING_CLK256: prscaler = 256;		break; //clkI/O/256 (From prescaler)
		case PRESCALING_CLK1024:prscaler = 1024;	break; // clkI/O/1024 (From prescaler)
		default:				prscaler = 1;		break; //External clock source on T0 pin. Clock on falling edge/rising edge
	}

	if(configuartion->mode == Fast_PWM){
 180:	88 81       	ld	r24, Y
 182:	88 34       	cpi	r24, 0x48	; 72
 184:	89 f4       	brne	.+34     	; 0x1a8 <TIMER0_Get_FreqValue+0x76>
		*Fpwm = (F_CPU)/(256*prscaler);
 186:	54 2f       	mov	r21, r20
 188:	44 27       	eor	r20, r20
 18a:	9a 01       	movw	r18, r20
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	72 e1       	ldi	r23, 0x12	; 18
 194:	8a e7       	ldi	r24, 0x7A	; 122
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 1a 01 	call	0x234	; 0x234 <__udivmodsi4>
 19c:	f8 01       	movw	r30, r16
 19e:	20 83       	st	Z, r18
 1a0:	31 83       	std	Z+1, r19	; 0x01
 1a2:	42 83       	std	Z+2, r20	; 0x02
 1a4:	53 83       	std	Z+3, r21	; 0x03
 1a6:	16 c0       	rjmp	.+44     	; 0x1d4 <TIMER0_Get_FreqValue+0xa2>
	}
	else{	//case of phase correct PWM
		*Fpwm = (F_CPU)/(510*prscaler);
 1a8:	8e ef       	ldi	r24, 0xFE	; 254
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	48 9f       	mul	r20, r24
 1ae:	90 01       	movw	r18, r0
 1b0:	49 9f       	mul	r20, r25
 1b2:	30 0d       	add	r19, r0
 1b4:	58 9f       	mul	r21, r24
 1b6:	30 0d       	add	r19, r0
 1b8:	11 24       	eor	r1, r1
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	72 e1       	ldi	r23, 0x12	; 18
 1c2:	8a e7       	ldi	r24, 0x7A	; 122
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 1a 01 	call	0x234	; 0x234 <__udivmodsi4>
 1ca:	f8 01       	movw	r30, r16
 1cc:	20 83       	st	Z, r18
 1ce:	31 83       	std	Z+1, r19	; 0x01
 1d0:	42 83       	std	Z+2, r20	; 0x02
 1d2:	53 83       	std	Z+3, r21	; 0x03
	}
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <gpio_init>:

#include <avr/io.h>
#include "MCAL/Timers/Timers.h"

void gpio_init(){
	DDRB |= (1U<<PB3);	//OC0 pin set as output
 1de:	bb 9a       	sbi	0x17, 3	; 23
}
 1e0:	08 95       	ret

000001e2 <main>:

int main(void)
{
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	00 d0       	rcall	.+0      	; 0x1e8 <main+0x6>
 1e8:	0f 92       	push	r0
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
	gpio_init();
 1ee:	0e 94 ef 00 	call	0x1de	; 0x1de <gpio_init>
	TIMER0_CONFIG T_Cfg;
	T_Cfg.mode = PC_PWM;
 1f2:	80 e4       	ldi	r24, 0x40	; 64
 1f4:	89 83       	std	Y+1, r24	; 0x01
	T_Cfg.clk = PRESCALING_CLK256;
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	8a 83       	std	Y+2, r24	; 0x02
	T_Cfg.polarity = normal;
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	8b 83       	std	Y+3, r24	; 0x03
	TIMER0_Init(&T_Cfg);
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	0e 94 49 00 	call	0x92	; 0x92 <TIMER0_Init>
	
	TIMER0_SetDutyValue(25);//set a 25% duty cycle
 206:	89 e1       	ldi	r24, 0x19	; 25
 208:	0e 94 8b 00 	call	0x116	; 0x116 <TIMER0_SetDutyValue>
 20c:	ff cf       	rjmp	.-2      	; 0x20c <main+0x2a>

0000020e <__divmodhi4>:
 20e:	97 fb       	bst	r25, 7
 210:	09 2e       	mov	r0, r25
 212:	07 26       	eor	r0, r23
 214:	0a d0       	rcall	.+20     	; 0x22a <__divmodhi4_neg1>
 216:	77 fd       	sbrc	r23, 7
 218:	04 d0       	rcall	.+8      	; 0x222 <__divmodhi4_neg2>
 21a:	2e d0       	rcall	.+92     	; 0x278 <__udivmodhi4>
 21c:	06 d0       	rcall	.+12     	; 0x22a <__divmodhi4_neg1>
 21e:	00 20       	and	r0, r0
 220:	1a f4       	brpl	.+6      	; 0x228 <__divmodhi4_exit>

00000222 <__divmodhi4_neg2>:
 222:	70 95       	com	r23
 224:	61 95       	neg	r22
 226:	7f 4f       	sbci	r23, 0xFF	; 255

00000228 <__divmodhi4_exit>:
 228:	08 95       	ret

0000022a <__divmodhi4_neg1>:
 22a:	f6 f7       	brtc	.-4      	; 0x228 <__divmodhi4_exit>
 22c:	90 95       	com	r25
 22e:	81 95       	neg	r24
 230:	9f 4f       	sbci	r25, 0xFF	; 255
 232:	08 95       	ret

00000234 <__udivmodsi4>:
 234:	a1 e2       	ldi	r26, 0x21	; 33
 236:	1a 2e       	mov	r1, r26
 238:	aa 1b       	sub	r26, r26
 23a:	bb 1b       	sub	r27, r27
 23c:	fd 01       	movw	r30, r26
 23e:	0d c0       	rjmp	.+26     	; 0x25a <__udivmodsi4_ep>

00000240 <__udivmodsi4_loop>:
 240:	aa 1f       	adc	r26, r26
 242:	bb 1f       	adc	r27, r27
 244:	ee 1f       	adc	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	a2 17       	cp	r26, r18
 24a:	b3 07       	cpc	r27, r19
 24c:	e4 07       	cpc	r30, r20
 24e:	f5 07       	cpc	r31, r21
 250:	20 f0       	brcs	.+8      	; 0x25a <__udivmodsi4_ep>
 252:	a2 1b       	sub	r26, r18
 254:	b3 0b       	sbc	r27, r19
 256:	e4 0b       	sbc	r30, r20
 258:	f5 0b       	sbc	r31, r21

0000025a <__udivmodsi4_ep>:
 25a:	66 1f       	adc	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	88 1f       	adc	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	1a 94       	dec	r1
 264:	69 f7       	brne	.-38     	; 0x240 <__udivmodsi4_loop>
 266:	60 95       	com	r22
 268:	70 95       	com	r23
 26a:	80 95       	com	r24
 26c:	90 95       	com	r25
 26e:	9b 01       	movw	r18, r22
 270:	ac 01       	movw	r20, r24
 272:	bd 01       	movw	r22, r26
 274:	cf 01       	movw	r24, r30
 276:	08 95       	ret

00000278 <__udivmodhi4>:
 278:	aa 1b       	sub	r26, r26
 27a:	bb 1b       	sub	r27, r27
 27c:	51 e1       	ldi	r21, 0x11	; 17
 27e:	07 c0       	rjmp	.+14     	; 0x28e <__udivmodhi4_ep>

00000280 <__udivmodhi4_loop>:
 280:	aa 1f       	adc	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	a6 17       	cp	r26, r22
 286:	b7 07       	cpc	r27, r23
 288:	10 f0       	brcs	.+4      	; 0x28e <__udivmodhi4_ep>
 28a:	a6 1b       	sub	r26, r22
 28c:	b7 0b       	sbc	r27, r23

0000028e <__udivmodhi4_ep>:
 28e:	88 1f       	adc	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	5a 95       	dec	r21
 294:	a9 f7       	brne	.-22     	; 0x280 <__udivmodhi4_loop>
 296:	80 95       	com	r24
 298:	90 95       	com	r25
 29a:	bc 01       	movw	r22, r24
 29c:	cd 01       	movw	r24, r26
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
